{
  "_args": [
    [
      {
        "raw": "middle-earth@0.0.6",
        "scope": null,
        "escapedName": "middle-earth",
        "name": "middle-earth",
        "rawSpec": "0.0.6",
        "spec": "0.0.6",
        "type": "version"
      },
      "/Users/jaimecastignane/Desarrollo/Angular/TestProject/node_modules/bootstrapp"
    ]
  ],
  "_from": "middle-earth@0.0.6",
  "_id": "middle-earth@0.0.6",
  "_inCache": true,
  "_location": "/middle-earth",
  "_npmUser": {
    "name": "yunghwakwon",
    "email": "yung.kwon@damncarousel.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "middle-earth@0.0.6",
    "scope": null,
    "escapedName": "middle-earth",
    "name": "middle-earth",
    "rawSpec": "0.0.6",
    "spec": "0.0.6",
    "type": "version"
  },
  "_requiredBy": [
    "/bootstrapp"
  ],
  "_resolved": "https://registry.npmjs.org/middle-earth/-/middle-earth-0.0.6.tgz",
  "_shasum": "83551b62767e5c170d7c1139754685064008595b",
  "_shrinkwrap": null,
  "_spec": "middle-earth@0.0.6",
  "_where": "/Users/jaimecastignane/Desarrollo/Angular/TestProject/node_modules/bootstrapp",
  "author": {
    "name": "Yung Hwa Kwon",
    "email": "yung.kwon@damncarousel.com",
    "url": "http://damncarousel.com/"
  },
  "bugs": {
    "url": "https://github.com/nowk/middle-earth.js/issues"
  },
  "dependencies": {
    "express": "^4.0.0"
  },
  "description": "Middlware manager for express.js",
  "devDependencies": {
    "chai": "^1.9.1",
    "sinon": "^1.9.1",
    "supertest": "^0.11.0"
  },
  "directories": {},
  "dist": {
    "shasum": "83551b62767e5c170d7c1139754685064008595b",
    "tarball": "https://registry.npmjs.org/middle-earth/-/middle-earth-0.0.6.tgz"
  },
  "homepage": "https://github.com/nowk/middle-earth.js",
  "keywords": [
    "express",
    "middleware",
    "manager"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "yunghwakwon",
      "email": "yung.kwon@damncarousel.com"
    }
  ],
  "name": "middle-earth",
  "optionalDependencies": {},
  "readme": "# Middle Earth\n\nMiddleware manager for [Express.js](https://github.com/visionmedia/express)\n\n## Why...?\n\nCore objective is to keep configurations for different enviroments/use cases in one spot vs. spreading them out based on where they need to be loaded.\n\n## Install\n\n    npm install middle-earth\n\n## Usage\n\nExamples below are basic. But should provide you with an idea of what you can do. \n\n---\n\n    var express = require('express');\n    var MiddleEarth = require('middle-earth');\n\n    var app = express();\n\n\nAppending and/or prepending.\n\n    app\n      .middlewares([\n        {name: 'body-parser', cb: bodyParser()},\n        {name: 'method-override', cb: methodOverride()}\n      ]);\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app\n        .middlewares()\n        .prepend([\n          {name: 'basicAuth', cb: express.basicAuth(\"user\", \"strong\")}\n        ])\n        .append([\n          {name: 'something-else', cb: somethingElse()},\n          {name: 'and-another', cb: andAnother()}\n        ]);\n    }\n\n    app.middlewares().finish();\n\nEquivalent to:\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app.use(express.basicAuth(\"user\", \"strong\"));\n    }\n\n    app.use(bodyParser());\n    app.use(methodOverride());\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app.use(somethingElse());\n      app.use(andAnother());\n    }\n\n---\n\nYou can also insert a middleware before or after another.\n\n    app\n      .middlewares([\n        {name: 'body-parser', cb: bodyParser()},\n        {name: 'method-override', cb: methodOverride()}\n      ]);\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app\n        .middlewares()\n        .before('body-parser', {name: 'basicAuth', cb: express.basicAuth(\"user\", \"strong\")});\n        .after('body-parser', {name: 'other', cb: other()});\n    }\n\n    app.middlewares().finish();\n\nEquivalent to:\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app.use(express.basicAuth(\"user\", \"strong\"));\n    }\n\n    app.use(bodyParser());\n    app.use(methodOverride());\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app.use(other());\n    }\n\n\n---\n\nPathed middlewares\n\n    app\n      .middlewares([\n        {name: 'body-parser', cb: bodyParser()},\n        {name: 'method-override', cb: methodOverride()},\n        {name: 'static', cb: express.static(__dirname+'/../public')}\n      ])\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app\n        .middlewares()\n        .prepend([\n          {name: \"basic-auth\", cb: express.basicAuth(\"user\", \"strong\"), path: \"/admin\"}\n        ])\n        .append([\n          {name: 'other', cb: other()}\n        ]);\n    }\n\n    app.middlewares().finish();\n\nEquivalent to:\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app.use(\"/admin\", express.basicAuth(\"user\", \"strong\"));\n    }\n\n    app.use(bodyParser());\n    app.use(methodOverride());\n    app.use(express.static(__dirname+'/../public'));\n\n    if (['production', 'staging'].indexOf(process.env.NODE_ENV) >= 0) {\n      app.use(other());\n    }\n\n\n---\n\nExecute a function at a specific point. Primary use would be to allow routes to be mapped at a particular spot.\n\n    var route = express.Router();\n    route.get(\"/posts\", function(req, res, next) {\n      res.send(200);\n    });\n\n    app\n      .middlewares([\n        {name: 'compress', cb: compress()},\n        {name: 'logger', cb: Log.logger('dev')},\n        {name: 'body-parser', cb: bodyParser()},\n        {name: 'method-override', cb: methodOverride()},\n        {name: 'cookie-parser', cb: cookieParser('secret')},\n        {name: 'session', cb: session({secret: 'secret', key: 'sid', cookie: {secure: true}})},\n        {name: 'csrf', cb: Csrf.csrf()},\n        {name: 'csrf-local-token', cb: Csrf.localToken()},\n        {name: 'static', cb: express.static(__dirname+'/../public')}\n      ]);\n\n    app\n      .middlewares()\n      .before('static', {name: 'routes', fn: function() {\n        app.use(route);\n      }});\n\n    app.middlewares().finish();\n\nEquivalent to:\n\n    app.use(compress());\n    app.use(Log.logger('dev'));\n    app.use(bodyParser());\n    app.use(methodOverride());\n    app.use(cookieParser('secret'));\n    app.use(session({secret: 'secret', key: 'sid', cookie: {secure: true}}));\n    app.use(Csrf.csrf());\n    app.use(Csrf.localToken());\n    app.use(route);\n    app.use(express.static(__dirname+'/../public'));\n\n\n---\n\nRemoving a middleware from the queue.\n\n    app\n      .middlewares([\n        {name: 'body-parser', cb: bodyParser()},\n        {name: 'method-override', cb: methodOverride()},\n        {name: 'static', cb: express.static(__dirname+'/../public')},\n        {name: 'logger', cb: logger()}\n      ])\n\n    if ('test' === process.env.NODE_ENV) {\n      app\n        .middlewares()\n        .remove('logger');\n    }\n\n    app.middlewares().finish();\n\n\nEquivalent to:\n\n    app.use(bodyParser());\n    app.use(methodOverride());\n    app.use(express.static(__dirname+'/../public'));\n\n    if ('test' != process.env.NODE_ENV) {\n      app.use(logger());\n    }\n\n---\n\nOvewrite an existing middleware in the queue.\n\n    app\n      .middlewares([\n        {name: 'overwrite-me', cb: fn1()},\n        {name: 'no-touchy', cb: fn2()}\n      ]);\n\n    if ('test' === process.env.NODE_ENV) {\n      app\n        .middelwares()\n        .overwrite('overwrite-me', {name: 'diff-name', cb: fn3()});\n    }\n\n    app.middelwares().finish();\n\nEquivalent to:\n\n    if ('test' === process.env.NODE_ENV) {\n      app.use(fn3());\n    } else {\n      app.use(fn1());\n    }\n\n    app.use(fn2());\n\n\nYou may also just pass it a middlware/function. \n\n      app\n        .middelwares()\n        .overwrite('overwrite-me', function(req, res, next) {\n          next();\n        });\n\n*Note, make sure you don't confuse your \"middlewares\" with the \"function\" executables you can add to the queue.*\n\n\n## Important\n\nThis does not alter middlewares already applied (`use`'d) on the `app`. \n\nYou can use it in conjuction with the normal `app.use()`, but middlewares will be applied when you call `#finish()` and the order will be set accordingly to that invocation point.\n\n\n## Test\n\n    npm test\n\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/nowk/middle-earth.js.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "version": "0.0.6"
}
